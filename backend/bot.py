from telegram import Update, InputMediaPhoto
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext, Application
import os
from model import PlaceRecognizer
import argparse

recognizer = None

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–µ–π –ü–£–ù–ö–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–Ω—è—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Å—Ç–æ.")

async def handle_photo(update: Update, context: CallbackContext):
    global recognizer
    
    status_message = await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        photo_file = await update.message.photo[-1].get_file()
        
        file_path = "query_image.jpg"
        await photo_file.download_to_drive(file_path)
        
        await status_message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        label, similar = recognizer.recognize_place(file_path)
        
        if label:
            await status_message.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            message = f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ: {label}."
            await update.message.reply_text(message)
            
            await update.message.reply_text("–í–æ—Ç 3 –ø–æ—Ö–æ–∂–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:")
            
            photos = []
            for i, (img_path, distance) in enumerate(similar[:3], 1):
                photos.append(InputMediaPhoto(
                    media=open(img_path, "rb")
                ))

            await update.message.reply_media_group(photos)
            
            await status_message.delete()
        else:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ.")
            
    except Exception as e:
        await status_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"Error: {e}")

def main():
    parser = argparse.ArgumentParser(description='Place recognizer')
    parser.add_argument('-t', '--token', type=str, required=True, help='Telegram Bot Token')
    args = parser.parse_args()

    global recognizer
    recognizer = PlaceRecognizer()
    recognizer.load_model()
    print("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    application = Application.builder().token(args.token).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    application.run_polling()

if __name__ == "__main__":
    main()